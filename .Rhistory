stopifnot(inherits(fit, 'loess'))
# parameters
n <- fit$n
trace <- fit$trace.hat
sigma2 <- sum(resid(fit) ^ 2) / (n - 1)
return(log(sigma2) + 1 + (2 * (trace + 1)) / (n - trace - 2))
}
autoloess <- function(fit, span=c(.1, .9)) {
# compute loess fit which has span minimizes AIC_C
#
# @param fit        loess fit; span parameter value doesn't matter
# @param span       a two-value vector representing the minimum and
#                   maximum span values
# @return           loess fit with span minimizing the AIC_C function
stopifnot(inherits(fit, 'loess'), length(span) == 2)
# loss function in form to be used by optimize
f <- function(span) aicc.loess(update(fit, span=span))
# find best loess according to loss function
return(update(fit, span=optimize(f, span)$minimum))
}
autoloess()
cell <- read.csv(file.choose(),header = T, sep = ',')
attach(cell)
normEdj <- (cell$Edj-mean(cell$Edj))/sd(Edj)
normPopD_m <- (cell$PopD_m-mean(cell$PopD_m))/sd(PopD_m)
normDist_KM <- (cell$Dist_KM-mean(cell$Dist_KM))/ sd(Dist_KM)
Dist_KM<- cell$Dist_KM # assign distance for common name
comb_val <- cbind(Dist_KM,normPopD_m, normEdj) # combine as numeric
val<- as.data.frame(comb_val) # convert to dataframe
# count dimension
dim(val)
# reorder rows based on Independent variable_distance from CBD
val <- val[order(val$Dist_KM),]
autoloess(val0$normEdj ~ val0$Dist_KM)
autoloess(loess(val0$normEdj ~ val0$Dist_KM))
autoloess(loess(val$normEdj ~ val$Dist_KM))
autoloess(loess(cell$Edj ~ cell$Dist_KM))
View(val)
tuneSpline = function(x,y,span.vals=seq(0.1,1,by=0.05),fold=10){
require(bootstrap)
fun.fit <- function(x,y,span) {smooth.spline(x = x,y = y,spar = span)}
fun.predict <- function(fit,x0) {predict(fit,x0)$y}
mae <- sapply(span.vals, function(span){
y.cv <- bootstrap::crossval(
x,y,fun.fit,fun.predict,span=span,ngroup = fold
)$cv.fit
fltr <- which(!is.na(y.cv))
mean(abs(y[fltr]-y.cv[fltr]))
})
span.vals[which.min(mae)]
}
attach(cars)
tuneSpline(speed,dist,fold = length(dist))
tuneSpline = function(x,y,span.vals=seq(0.1,1,by=0.05),fold=10){
require(bootstrap)
fun.fit <- function(x,y,span) {smooth.spline(x = x,y = y,spar = span)}
fun.predict <- function(fit,x0) {predict(fit,x0)$y}
mae <- sapply(span.vals, function(span){
y.cv <- bootstrap::crossval(
x,y,fun.fit,fun.predict,span=span,ngroup = fold
)$cv.fit
fltr <- which(!is.na(y.cv))
mean(abs(y[fltr]-y.cv[fltr]))
})
span.vals[which.min(mae)]
}
attach(cars)
tuneSpline(speed,dist,fold = length(dist))
install.packages("bootstrap")
tuneSpline = function(x,y,span.vals=seq(0.1,1,by=0.05),fold=10){
require(bootstrap)
fun.fit <- function(x,y,span) {smooth.spline(x = x,y = y,spar = span)}
fun.predict <- function(fit,x0) {predict(fit,x0)$y}
mae <- sapply(span.vals, function(span){
y.cv <- bootstrap::crossval(
x,y,fun.fit,fun.predict,span=span,ngroup = fold
)$cv.fit
fltr <- which(!is.na(y.cv))
mean(abs(y[fltr]-y.cv[fltr]))
})
span.vals[which.min(mae)]
}
attach(cars)
tuneSpline(speed,dist,fold = length(dist))
attach(cell)
attach(val)
tuneSpline(val$normEdj, val$Dist_KM, fold = length(val$Dist_KM))
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 1236 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normEdj ~ val0$Dist_KM, degree=2, span = 0.75)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normEdj,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Energy consumption density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0,col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 1236 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normEdj ~ val0$Dist_KM, degree=2, span = 0.5)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normEdj,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Energy consumption density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0,col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 1236 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normEdj ~ val0$Dist_KM, degree=1, span = 0.5)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normEdj,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Energy consumption density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0,col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 1236 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normEdj ~ val0$Dist_KM, degree=1, span = 0.05)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normEdj,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Energy consumption density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0,col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 10 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normPopD_m ~ val0$Dist_KM, degree= 2, span = 0.75)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normPopD_m,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Population density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0, col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 10 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normPopD_m ~ val0$Dist_KM, degree= 1, span = 0.75)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normPopD_m,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Population density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0, col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 10 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normPopD_m ~ val0$Dist_KM, degree= 1, span = 0.5)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normPopD_m,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Population density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0, col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 10 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normPopD_m ~ val0$Dist_KM, degree= 1, span = 0.05)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normPopD_m,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Population density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0, col= 4, lty=2)
# create empty matrix
ll <- matrix(NA,nrow=10,ncol=12364)
# iterate 10 times (select the whole function and run)
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(val)[1],replace=TRUE)
# draw sample from the data and reorder rows based on distance
val0 <- val[ss,]; val0 <- val0[order(val0$Dist_KM),]
# fit loess function through data (similar to spline)
loess0 <- loess(val0$normPopD_m ~ val0$Dist_KM, degree= 1, span = 0.75)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(val=1:12364))
}
# plot the data points
plot(val$Dist_KM,val$normPopD_m,pch=1,cex=0.5, col = 8, ylim = c(-2,4), xlim = c(0,15), xlab = "Distance from CBD (km)", ylab = " Population density")
# plot each prediction model (select whole function and run)
for(i in 1:10){lines(1:12364,ll[i,],col="khaki",lwd=1)}
# plot the average in red
lines(1:12364,apply(ll,2,mean),col=2,lwd=2)
abline(h=0, col= 4, lty=2)
install.packages("leaflet")
library(magrittr)
SFMAP<-leaflet() %>%
)
install.packages("magrittr")
library(leaflet)
library(magrittr)
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 42, 37.78, zoom =13) %>%
addMarkers(-122, 42, 37.78, popup= "my map")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 42, 37.78, zoom =13) %>%
addMarkers(-122, 42, 37.78, popup= "Dhaka")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 42, 37.78, zoom =13) %>%
addMarkers(-122, 42, 37.78, popup= "SF Bay area")
SFMap
addMarkers(-122, 42, 37.78, popup= "my map")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 42, 37.78, zoom =13) %>%
addMarkers(-122, 42, 37.78, popup= "my map")
SFMap
addMarkers(-140, 42, 37.78, popup= "my map")
SFMap <- leaflet() %>%
addTiles() %>%
setView(-140, 42, 37.78, zoom =13) %>%
addMarkers(-140, 42, 37.78, popup= "my map")
SFMap
?setView
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 90.41, 23.81, zoom =13) %>%
addMarkers(-122, 90.41, 23.81, popup= "my map")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.41, 23.81, zoom =13) %>%
addMarkers(90.41, 23.81, popup= "my map")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(23°49'58.6"N 90°25'00.4"E, zoom =13) %>%
addMarkers(23°49'58.6"N 90°25'00.4"E, popup= "my map")
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.25, 23.49, zoom =13) %>%
addMarkers(90.25, 23.49, popup= "my map")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.25, 23.49, zoom =13) %>%
addMarkers(90.25, 23.49, popup= "SRC1")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(-122, 90.25, 23.49, zoom =13) %>%
addMarkers(-122, 90.25, 23.49, popup= "SRC1")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(122, 90.25, 23.49, zoom =13) %>%
addMarkers(122, 90.25, 23.49, popup= "SRC1")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.25, 23.49, zoom =13) %>%
addMarkers(90.25, 23.49, popup= "SRC1")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.25, 23.7, zoom =13) %>%
addMarkers(90.25, 23.7, popup= "SRC1")
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
SFMap
?addCircles
CHchart <- leaflet() %>%
addCircles(map, lng = NULL, lat = NULL, radius = 10, layerId = NULL, group = NULL, stroke = TRUE, color = "#03F", weight = 5, opacity = 0.5, fill = TRUE, fillColor = color, fillOpacity = 0.2, dashArray = NULL, popup = NULL, options = pathOptions(), data = getMapData(map))
CHchart <- leaflet() %>%
addCircles(lng = NULL, lat = NULL,
radius = 10,
layerId = NULL,
group = NULL,
stroke = TRUE,
color = "#03F",
weight = 5,
opacity = 0.5,
fill = TRUE,
fillColor = color,
fillOpacity = 0.2,
dashArray = NULL,
popup = NULL,
options = pathOptions(),
data = getMapData(map))
CHchart
CHchart <- leaflet() %>%
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
addCircles(lng = NULL, lat = NULL,
radius = 10,
color = "#03F",
weight = 5,
opacity = 0.5,
fill = TRUE,
fillColor = color,
fillOpacity = 0.2,
options = pathOptions(),
data = getMapData(map))
SFMap
addCircles(lng = NULL, lat = NULL,
radius = 10,
color = "#03F",
weight = 5,
opacity = 0.5,
fill = TRUE,
fillOpacity = 0.2,
options = pathOptions(),
data = getMapData())
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
addCircles(lng = NULL, lat = NULL,
radius = 10,
color = "#03F",
weight = 5,
opacity = 0.5,
fill = TRUE,
fillOpacity = 0.2,
options = pathOptions(),
data = getMapData(Map()))
SFMap
SFMap <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
SFMap
SRC1Map <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
SRC1Map
SRC2Map <- leaflet() %>%
addTiles() %>%
setView(90.41, 23.81, zoom =13) %>%
addMarkers(90.41, 23.81, popup= "SRC1")
SRC2Map
SRC1Map <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
SRC1Map
SRC2Map <- leaflet() %>%
addTiles() %>%
setView(90.41, 23.81, zoom =13) %>%
addMarkers(90.41, 23.81, popup= "SRC1")
SRC2Map
SRC1Map <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= "SRC1")
addMarkers(90.45, 23.81, popup= "SRC2")
SRC1Map
SRC1Map <- leaflet() %>%
addTiles() %>%
setView(90.35, 23.81, zoom =13) %>%
addMarkers(90.35, 23.81, popup= c("SRC1","SRC2" )
SRC1Map
install.packages("JGR")
library(JGR)
JGR()
install.packages("Rcmdr")
library(Rcmdr)
install.packages("car")
library(Rcmdr)
library(car)
require(ggmap)
install.packages("osmar")
mapSatt<-get_map(location='Germany', zoom=4, maptype = "satellite", source='google',color='color') # just change maptype
ggmap(mapSatt)
mapSatt<-get_map(location='bonn', zoom=4, maptype = "satellite", source='google',color='color') # just change maptype
ggmap(mapSatt)
install.packages(sparkr)
install.packages(sparkR)
install.packages(SparkR)
install.packages("SparkR")
library(SparkR)
install.packages("SparkR")
install.packages(c("BH", "caret", "crayon", "curl", "DBI", "devtools", "digest", "dplyr", "evaluate", "formatR", "gamlss", "gamlss.data", "gamlss.dist", "geosphere", "git2r", "googleVis", "gtable", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "maps", "mime", "multcomp", "munsell", "plyr", "psych", "quantmod", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rsconnect", "rstudioapi", "scales", "sp", "SparseM", "spdep", "stringi", "stringr", "swirl", "testthat", "tidyr", "tmap", "tseries", "withr", "zoo"))
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/home/spark")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/C:\spark-2.0.0-bin-hadoop2.7")
}
Sys.setenv(SPARK_HOME = "C:\spark-2.0.0-bin-hadoop2.7")
Sys.setenv(SPARK_HOME = "C:/spark-2.0.0-bin-hadoop2.7")
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "C:/spark-2.0.0-bin-hadoop2.7")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sc<- sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
sqlContext <- sparkRSQL.init(sc)
sqlContext <- sparkRSQL.init(sc)
df - createDataFrame(sqlContext, faithful)
help("Deprecated")
registerTempTable(df, "faith")
df - createDataFrame(sqlContext, faithful)
.Deprecated(new)
.Deprecated(new, msg)
install.packages("SparkR")
shiny::runApp('C:/Users/sikder/Desktop/int_report_DH')
shiny::runApp('C:/Users/sikder/Desktop/int_report_DH')
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
